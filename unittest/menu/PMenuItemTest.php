<?php

require_once dirname(__FILE__) . '/../../menu/menu-item.php';

/**
 * Test class for PMenuItem.
 * Generated by PHPUnit on 2012-04-10 at 09:54:27.
 */
class MenuTest extends PMenuItem {

    public $id = 0;

    public function __construct($id = 0) {
        $this->id = $id;
    }

    public static function newInstance($id) {
        return new self($id);
    }

}

class PMenuItemTest extends PHPUnit_Framework_TestCase {

    /**
     * @var PMenuItem
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MenuTest;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetTmpl().
     */
    public function testSetTmpl() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testOutput().
     */
    public function testOutput() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testAddChild().
     */
    public function testAddChild() {
        // Remove the following lines when you implement this test.
        $this->object->addChild(
            MenuTest::newInstance(1)
                ->addChild(MenuTest::newInstance(11))
                ->addChild(MenuTest::newInstance(12)->addChild(MenuTest::newInstance(121)))
            );
        $this->object->addChild(new MenuTest(2));
        $this->object->addChild(new MenuTest(3));
        $this->object->addChild(new MenuTest(4));
        $this->assertTrue(4 == count($this->object->getChilds()));
        return $this->object;
    }

    /**
     * @depends testAddChild 
     */
    public function testGetChilds($menuItem) {
        $this->assertTrue(4 === count($menuItem->getChilds()));
        $childs = $menuItem->getChilds();
        $this->assertTrue(2 === count($childs[0]->getChilds()));
    }

    /**
     * @depends testAddChild
     */
    public function testGetParent($menuItem) {
        $this->assertTrue(NULL == $menuItem->getParent());
        $childs = $menuItem->getChilds();
        $this->assertTrue(1 == $childs[0]->id);
        $this->assertTrue(0 == $childs[0]->getParent()->id);
        $childsOfChild = $childs[0]->getChilds();
        $this->assertTrue(1 == $childsOfChild[0]->getParent()->id);
    }

}

?>
